use std::str::FromStr;
use crate::ast::tigerabs::*;
use crate::ast::position::*;

grammar;

pub Expr: Box<Exp> = {
    <l:Expr> <o:ExprOp> <r:Factor> => {
        let no_pos_exp = _Exp::OpExp {left: l, oper: o, right: r};
        return posedExp(no_pos_exp, 0, 0)
    },
    Factor,
}

ExprOp: Oper = {
    "+" => Oper::PlusOp,
    "-" => Oper::MinusOp,
};

Factor: Box<Exp> = {
    <l:Factor> <o:FactorOp> <r:Term> => {
        let no_pos_exp = _Exp::OpExp {left: l, oper: o, right: r};
        return posedExp(no_pos_exp, 0, 0)
    },
    Term,
};

FactorOp: Oper = {
    "*" => Oper::TimesOp,
    "/" => Oper::DivideOp,
};

Term: Box<Exp> = {
    Num => {
        let no_pos_exp = _Exp::IntExp(<>);
        return posedExp(no_pos_exp, 0, 0)
    },
    "(" <Expr> ")",
};

Num: i32 = {
    r"[0-9]+" => i32::from_str(<>).unwrap()
};
