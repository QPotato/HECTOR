use std::str::FromStr;
use crate::ast::*;
use crate::ast::position::*;
use crate::ast::lexer;

grammar;

pub Expr: Box<AST> = {
    "let" <decs:DecsEx> "in" "end" => {
        let unit = posed_exp(Exp::Unit, 0, 0);

        let no_pos_exp = Exp::Let {
            decs,
            body: unit,
        };

        return posed_exp(no_pos_exp, 0, 0);
    },
    "let" <decs: DecsEx> "in" <body: Expr> "end" => {
        let no_pos_exp = Exp::Let {
            decs,
            body,
        };

        return posed_exp(no_pos_exp, 0, 0);
    },
    "let" <decs: DecsEx> "in" <list: ExpList> "end" => {
        let seq = Exp::Seq(list);

        let no_pos_exp = Exp::Let {
            decs,
            body: posed_exp(seq, 0, 0),
        };

        return posed_exp(no_pos_exp, 0, 0);
    },
    LoopExp,
}

LoopExp: Box<AST> = {
    "for" <var:Sym> ":=" <lo:IfThenExp> "to" <hi:IfThenExp> "do" <body: Expr> => {
        let no_pos_exp = Exp::For {
            var,
            escape: false,
            lo,
            hi,
            body,
        };
        return posed_exp(no_pos_exp, 0, 0);
    },
    "while" <test:LoopExp> "do" <body:Expr> => {
        let no_pos_exp = Exp::While {
            test,
            body,
        };
        return posed_exp(no_pos_exp, 0, 0);
    },

    AssExp,
}

AssExp: Box<AST> = {
    <v:VarEx> ":=" <e:ArrExp> => {
        let no_pos_exp = Exp::Assign {var: v, exp: e};
        return posed_exp(no_pos_exp, 0, 0);
    },
    ArrExp,
}

ArrExp: Box<AST> = {
    // svar parses a VarEx which can only be a SimpleVar. Crazy hack brought from the yacc/bison parser
    <svar: VarEx> "[" <size: Expr> "]" "of" <init: IfThenExp> => {
        let no_pos_exp = Exp::Array {
            typ: var_name(svar),
            size,
            init,
        };

        return posed_exp(no_pos_exp, 0, 0);
    },

    IfThenExp,
}

IfThenExp: Box<AST> = {
    "if" <test:IfThenElseExp> "then" <then_:IfThenElseExp> => {
        let no_pos_exp = Exp::If {
            test,
            then_,
            else_: None,
        };
        return posed_exp(no_pos_exp, 0, 0);
    },

    IfThenElseExp,
}

IfThenElseExp: Box<AST> = {
    "if" <test:IfThenElseExp> "then" <then_:IfThenElseExp> "else" <else_:IfThenElseExp> => {
        let no_pos_exp = Exp::If {
            test,
            then_,
            else_: Some(else_),
        };
        return posed_exp(no_pos_exp, 0, 0);
    },
    BoolExp,
}

BoolExp: Box<AST> = {
    <l: BoolExp> "|" <r: CompExp> => {
        let no_pos_exp = Exp::If {
            test: l,
            then_: posed_exp(Exp::Int(1), 0, 0),
            else_: Some(r),
        };
        return posed_exp(no_pos_exp, 0, 0);
    },
    <l: BoolExp> "&" <r: CompExp> => {
        let no_pos_exp = Exp::If {
            test: l,
            then_: r,
            else_: Some(posed_exp(Exp::Int(0), 0, 0)),
        };
        return posed_exp(no_pos_exp, 0, 0);
    },
    CompExp,
}

CompExp: Box<AST> = {
    <l:AddExp> <o:CompOp> <r:AddExp> => {
        let no_pos_exp = Exp::Op {left: l, oper: o, right: r};
        return posed_exp(no_pos_exp, 0, 0);
    },
    AddExp,
}

CompOp: Oper = {
    "=" => Oper::EqOp,
    "<" => Oper::LtOp,
    ">" => Oper::GtOp,
    ">=" => Oper::GeOp,
    "<=" => Oper::LeOp,
    "<>" => Oper::NeqOp,
}

AddExp: Box<AST> = {
    <l:AddExp> <o:AddOp> <r:MultExp> => {
        let no_pos_exp = Exp::Op {left: l, oper: o, right: r};
        return posed_exp(no_pos_exp, 0, 0);
    },
    MultExp,
}

AddOp: Oper = {
    "+" => Oper::PlusOp,
    "-" => Oper::MinusOp,
};

MultExp: Box<AST> = {
    <l:MultExp> <o:MultOp> <r:Term> => {
        let no_pos_exp = Exp::Op {left: l, oper: o, right: r};
        return posed_exp(no_pos_exp, 0, 0);
    },
    Term,
};

MultOp: Oper = {
    "*" => Oper::TimesOp,
    "/" => Oper::DivideOp,
};

Term: Box<AST> = {
    "(" ")" => {
        let no_pos_exp = Exp::Unit;
        return posed_exp(no_pos_exp, 0, 0);
    },
    "nil" => {
        let no_pos_exp = Exp::Nil;
        return posed_exp(no_pos_exp, 0, 0);
    },
    "break" => {
        let no_pos_exp = Exp::Break;
        return posed_exp(no_pos_exp, 0, 0);
    },
    Num => {
        let no_pos_exp = Exp::Int(<>);
        return posed_exp(no_pos_exp, 0, 0);
    },
    <s:Str> => {
        let no_pos_exp = Exp::String(s);
        return posed_exp(no_pos_exp, 0, 0);
    },
    VarEx => {
        let no_pos_exp = Exp::Var(<>);
        return posed_exp(no_pos_exp, 0, 0);
    },
    <s:Sym> "(" ")" => {
        let no_pos_exp = Exp::Call {
            func: s,
            args: vec![],
        };
        return posed_exp(no_pos_exp, 0, 0);
    },
    <s:Sym> "(" <f:CallFields> ")" => {
        let no_pos_exp = Exp::Call {
            func: s,
            args: f,
        };
        return posed_exp(no_pos_exp, 0, 0);
    },
    <typ: Sym> "{" "}" => {
        let no_pos_exp = Exp::Record {
            fields: vec![],
            typ,
        };
        return posed_exp(no_pos_exp, 0, 0);
    },
    <typ: Sym> "{" <fields: RecFields> "}" => {
        let no_pos_exp = Exp::Record {
            fields,
            typ,
        };
        return posed_exp(no_pos_exp, 0, 0);
    },
    "(" <list: ExpList> ")" => {
        let no_pos_exp = Exp::Seq(list);
        return posed_exp(no_pos_exp, 0, 0);
    },
    "(" <Expr> ")",
};

ExpList: Vec<AST> = {
    <e: Expr> ";" <list: ExpMaybeList> => {
        let mut explist = vec![*e];
        for ex in list {
            explist.push(ex);
        }

        return explist;
    },
}

ExpMaybeList: Vec<AST> = {
    ExpList,
    Expr => {
        vec![*<>]
    }
}

RecFields: Vec<(Symbol, Box<AST>)> = {
    <f: RecField> "," <fields: RecFields> => {
        let mut flds = vec![f];

        for fld in fields {
            flds.push(fld);
        }

        return flds;
    },

    RecField => {
        vec![<>]
    },
}

RecField: (Symbol, Box<AST>) = {
    <s: Sym> "=" <e: Expr> => {
        (s, e)
    },
}

CallFields: Vec<AST> = {
    <e: Expr> "," <f: CallFields> => {
        let mut exps = vec![*e];

        for ex in f {
            exps.push(ex);
        }

        return exps;
    },
    Expr => {
        vec![*<>]
    }
}

VarEx: Var = {
    Sym => {
        return make_var(VarKind::Simple(<>));
    },
    <v:VarEx> "[" <e:Expr> "]" => {
        let boxed_var = Box::new(v);
        return make_var(VarKind::Subscript(boxed_var, e));
    },
    <v:VarEx> "." <s:Sym> => {
        let boxed_var = Box::new(v);
        return make_var(VarKind::Field(boxed_var, s));
    },
}

Num: i64 = {
    <n:"Number"> => n
};

Sym: String = {
    <s:"Symbol"> => s
}

Str: String = {
    <s:"StringLiteral"> => s
}

DecsEx: Vec<Dec> = {
    <new: DecEx> <others: DecsEx> => {
        append_dec(new, others)
    },
    DecEx => {
        vec![<>]
    },
}

DecEx: Dec = {
    "type" <name:Sym> "=" <ty:TyEx> => {
        Dec::TypeDec(vec![(_TypeDec::new(name, ty), Pos::new(0, 0))])
    },
    VardecEx,
    FundecEx,
}

FundecEx: Dec = {
    "function" <name: Sym> "(" <params: TyFieldsEx> ")" "=" <body: Expr> => {
        Dec::FunctionDec(vec![(_FunctionDec::new(name, params, None, body), Pos::new(0, 0))])
    },
    "function" <name: Sym> "(" <params: TyFieldsEx> ")" ":" <result: Sym> "=" <body: Expr> => {
        Dec::FunctionDec(vec![(_FunctionDec::new(name, params, Some(result), body), Pos::new(0, 0))])
    },
}

VardecEx: Dec = {
    "var" <name: Sym> ":=" <init: Expr> => {
        Dec::VarDec(_VarDec::new(name, None, init), Pos::new(0, 0))
    },
    "var" <name: Sym> ":" <typ: Sym> ":=" <init: Expr> => {
        Dec::VarDec(_VarDec::new(name, Some(typ), init), Pos::new(0, 0))
    },
}

TyEx: Ty = {
    Sym => Ty::Name(<>),

    "{" <tyfields: TyFieldsEx> "}" => Ty::Record(tyfields),
    "{" "}" => Ty::Record(vec![]),

    "array" "of" <s: Sym> => Ty::Array(s),
}

TyFieldsEx: Vec<Field> = {
    <new:TyFieldEx> "," <fields:TyFieldsEx> => {
        let mut tys = vec![new];

        for field in fields {
            tys.push(field);
        }
        return tys;
    },
    TyFieldEx => {
        vec![<>]
    }
}

TyFieldEx: Field = {
    <name: Sym> ":" <ty_name: Sym> => {
        Field {
            name,
            escape: false,
            typ: Ty::Name(ty_name),
        }
    }
}

extern {
    type Location = usize;
    type Error = lexer::LexicalError;

    enum lexer::Tok {
        "." => lexer::Tok::Point,
        ":" => lexer::Tok::Colon,
        ":=" => lexer::Tok::Assign,
        "," => lexer::Tok::Comma,
        ";" => lexer::Tok::Semicolon,
        "(" => lexer::Tok::OpenParen,
        ")" => lexer::Tok::CloseParen,
        "[" => lexer::Tok::OpenBracket,
        "]" => lexer::Tok::CloseBracket,
        "{" => lexer::Tok::OpenBraces,
        "}" => lexer::Tok::CloseBraces,
        "&" => lexer::Tok::Ampersand,
        "|" => lexer::Tok::Pipe,
        "=" => lexer::Tok::Equals,
        "<" => lexer::Tok::Lt,
        "<=" => lexer::Tok::Lte,
        ">" => lexer::Tok::Gt,
        ">=" => lexer::Tok::Gte,
        "<>" => lexer::Tok::Neq,
        "+" => lexer::Tok::Plus,
        "-" => lexer::Tok::Minus,
        "*" => lexer::Tok::Times,
        "/" => lexer::Tok::Div,
        "type" => lexer::Tok::Type,
        "array" => lexer::Tok::Array,
        "of" => lexer::Tok::Of,
        "var" => lexer::Tok::Var,
        "function" => lexer::Tok::Function,
        "let" => lexer::Tok::Let,
        "in" => lexer::Tok::In,
        "end" => lexer::Tok::End,
        "if" => lexer::Tok::If,
        "then" => lexer::Tok::Then,
        "else" => lexer::Tok::Else,
        "while" => lexer::Tok::While,
        "do" => lexer::Tok::Do,
        "for" => lexer::Tok::For,
        "to" => lexer::Tok::To,
        "break" => lexer::Tok::Break,
        "nil" => lexer::Tok::Nil,
        "Symbol" => lexer::Tok::Symbol(<String>),
        "StringLiteral" => lexer::Tok::Str(<String>),
        "Number" => lexer::Tok::Number(<i64>),
        "/*" => lexer::Tok::OpenComen, // Shouldn't appear
        "*/" => lexer::Tok::CloseComen, // Shouldn't appear
        "//" => lexer::Tok::LineComen, // Shouldn't appear
        "Quote" => lexer::Tok::Quote, // Shouldn't appear
    }
}